{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivitiyListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDettailedHeader.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","venue","city","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","loadUserActivities","setDisplayName","UserStore","name","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","e","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","positing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","event","preventDefault","Card","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","bordered","circular","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","ribbon","zIndex","top","border","v","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","relaxed","divided","Extra","ActivityDettailedHeader","ActivityDetailedSideBar","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","ModalContent","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","pointing","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.601d61bd.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize ;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosResponse, AxiosError } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use((config) => {\r\n    const token = store.commonStore.token;\r\n\r\n    if (token) {\r\n        config.headers!.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(async (response) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        await sleep(1000);\r\n    }\r\n\r\n    const pagination = response.headers['pagination'];\r\n\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n\r\n    switch(status) {\r\n        case 400:\r\n            if(typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/notfound');\r\n            }\r\n\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401: \r\n            toast.error('Unautharized');\r\n            break;\r\n        case 404: \r\n            history.push('/notfound');\r\n            break;\r\n        case 500: \r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>( url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n\r\n        return axios.post<Photo>('photos', formData, { \r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string,\r\n    isCancelled: boolean,\r\n    isGoing: boolean,\r\n    isHost: boolean,\r\n    host?: Profile,\r\n    attendees: Profile[],\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    venue: string = '';\r\n    city: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.description = activity.description;\r\n            this.category = activity.category;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string,\r\n    displayName: string,\r\n    image?: string,\r\n    bio?: string,\r\n    photos?: Photo[],\r\n    followersCount: number,\r\n    followingCount: number,\r\n    following: boolean,\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string,\r\n    url: string,\r\n    isMain: boolean,\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string,\r\n    title: string;\r\n    date: Date;\r\n    category: string;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../../app/models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() => this.predicate.keys(), () => {\r\n            this.pagingParams = new PagingParams();\r\n            this.activityRegistry.clear();\r\n            this.loadActivities();\r\n        });\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            });\r\n        };\r\n\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n    \r\n    get groupedActivities() {\r\n        return Object.entries(this.activitiesByDate.reduce((activities, activity) => {\r\n            const date = format(activity.date!, 'dd MMM yyyy');\r\n\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n\r\n            return activities;\r\n        }, {} as {[key: string] : Activity[]}))\r\n    };\r\n\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true);\r\n\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach((activity) => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n    \r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n\r\n        if(activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.setLoadingInitial(true);\r\n\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                });\r\n\r\n                this.setLoadingInitial(false);\r\n\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const { user } = store.userStore;\r\n\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(a => a.username === user.username);\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const { user } = store.userStore;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {\r\n                        ...this.getActivity(activity.id), \r\n                        ...activity \r\n                    };\r\n\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.delete(id);\r\n\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n    \r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const { user } = store.userStore;\r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle =async () => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach((activity) => {\r\n            activity.attendees.forEach((attendee) => {\r\n\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() => this.activeTab, activeTab => {\r\n            if (activeTab === 3 || activeTab === 4) {\r\n                const predicate = activeTab === 3 ? 'followers' : 'following';\r\n\r\n                this.loadFollowings(predicate);\r\n            } else {\r\n                this.followings = [];\r\n            }\r\n        });\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n\r\n                    this.uploading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                   this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                   this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                   this.profile.image = photo.url;\r\n                   this.loading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                };\r\n\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n\r\n                this.followings.forEach((profile) => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++\r\n                        profile.following = !profile.following;\r\n                    };\r\n                });\r\n\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n        \r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn () {\r\n        return !!this.user;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) {\r\n            this.user.image = image\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\nimport CommentStore from \"./commentStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { ServerError } from \"../models/serverError\";\r\nimport { makeAutoObservable, reaction } from \"mobx\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder().withUrl(`${process.env.REACT_APP_CHAT_URL}/?activityId=${activityId}`, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            }).withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch((e) => console.log('Error establishing the connection', e));\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach((comment) => {\r\n                        comment.createdAt = new Date(comment.createdAt);\r\n                    });\r\n\r\n                    this.comments = comments;\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    \r\n                    this.comments.unshift(comment);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(e => console.log('Error stopping connection', e));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar () {    \r\n    const { userStore: { user, logout } } = useStore();\r\n    \r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.svg\" alt=\"logo\" style={{marginRight: 5}} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/create' positive content='Create Activitiy' />\r\n                </Menu.Item>  \r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown positing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>  \r\n            </Container>\r\n        </Menu>\r\n    )\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function FollowButton({ profile } : Props) {\r\n    const { profileStore, userStore } = useStore();\r\n\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(event: SyntheticEvent, username: string) {\r\n        event.preventDefault();\r\n\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true)\r\n    }\r\n\r\n    return (\r\n        <Reveal animated=\"move\">\r\n            <Reveal.Content visible style={{ width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color=\"teal\" \r\n                    content={profile.following ? 'Following' : 'Not following'} \r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Image, Icon } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>\r\n                    {profile.displayName}\r\n                </Card.Header>\r\n                <Card.Description>\r\n                    {truncate(profile.bio)}\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' /> {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n});","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../../features/profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[],\r\n}\r\n \r\nexport default observer(function ActivitiyListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'pink',\r\n        borderWidth: 3,\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup hoverable key={attendee.username} trigger={\r\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                    <Image \r\n                        size='mini' \r\n                        bordered\r\n                        circular \r\n                        src={attendee.image || '/assets/user.png'} \r\n                        style={attendee.following ? styles : null}\r\n                    />\r\n                </List.Item>\r\n                }>\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee}/>\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivitiyListItemAttendee from './ActivitiyListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity,\r\n}\r\n\r\nconst ActivityListItem = ({ activity } : Props) => {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || 'assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {\r\n                                    activity.title\r\n                                }\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by <Link to={`/profiles/${activity.host?.username}`}> { activity.host?.displayName }</Link>\r\n                                { activity.isHost && (\r\n                                    <Item.Description>\r\n                                        <Label basic color='orange'>\r\n                                            You are hosting this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                ) }\r\n                                { activity.isGoing && !activity.isHost && (\r\n                                    <Item.Description>\r\n                                        <Label basic color='green'>\r\n                                            You are going to this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                ) }\r\n                            </Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivitiyListItemAttendee attendees={activity.attendees!}/>           \r\n            </Segment>\r\n            <Segment clearing>\r\n                <span> \r\n                    {activity.description}\r\n                </span>\r\n                <Button as={Link} to={`/activities/${activity.id}`} color='teal' floated='right' content='View' />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default ActivityListItem;\r\n","import { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nconst ActivityList = () => {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n        {\r\n            groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                        {\r\n                            activities.map((activity) => \r\n                                <ActivityListItem key={activity.id} activity={activity} />\r\n                            )\r\n                        }\r\n                </Fragment>\r\n            ))\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityList);\r\n","import React from 'react';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport Calendar from 'react-calendar';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate} } = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: '28px'}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: any) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n});\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityList from '../dashboard/ActivityList';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nconst ActivityDashboard = () => {\r\n    const { activityStore } = useStore();\r\n\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll \r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDashboard);\r\n","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string,\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {\r\n            meta.touched && meta.error ? (\r\n                    <Label basic color='red'>{meta.error}</Label>\r\n                ) : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { Formik, Form, ErrorMessage } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return(\r\n        <Formik initialValues={{\r\n                email: '',\r\n                password: '',\r\n                error: null\r\n            }}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"of\">\r\n                    <Header as='h2' content='Login to reactivities' color=\"teal\" textAlign=\"center\"/>\r\n                    <MyTextInput name='email' placeholder=\"Email\" />\r\n                    <MyTextInput name='password' placeholder=\"Password\" type='password' />\r\n                    <ErrorMessage \r\n                        name=\"error\" render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n});","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {\r\n                errors && (\r\n                    <Message.List>\r\n                        {\r\n                            errors.map((err: any, i: any) => (\r\n                                <Message.Item key={i}>\r\n                                    {err}\r\n                                </Message.Item>\r\n                            ))\r\n                        }\r\n                    </Message.List>\r\n                )\r\n            }\r\n        </Message>\r\n    )\r\n}","import { Formik, Form, ErrorMessage } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return(\r\n        <Formik initialValues={{\r\n                email: '',\r\n                password: '',\r\n                displayName: '',\r\n                username: '',\r\n                error: null\r\n            }}\r\n            onSubmit={\r\n                (values, {setErrors}) => userStore.register(values).catch(error => setErrors({error}))\r\n            }\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete=\"of\">\r\n                    <Header as='h2' content='Sign up to reactivities' color=\"teal\" textAlign=\"center\"/>\r\n                    <MyTextInput name='email' placeholder=\"Email\" />\r\n                    <MyTextInput name='password' placeholder=\"Password\" type='password' />\r\n                    <MyTextInput name='displayName' placeholder=\"Display name\" />\r\n                    <MyTextInput name='username' placeholder=\"Username\" />\r\n                    <ErrorMessage \r\n                        name=\"error\" render={() => <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n});","import React from 'react';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center'  vertical className='masthead'>\r\n            <Container>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='assets/logo.png' alt='logo' styles={{ marginBottom: 12}}/>\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn ? (\r\n                        <>\r\n                            <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                            <Button as={Link} to='/activities' size='huge' inverted>\r\n                                Go to activities\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                }\r\n            </Container>\r\n        </Segment>\r\n    )\r\n});\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nconst LoadingComponent = ({inverted = true, content = 'Loading...'}: Props) => {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}\r\n\r\nexport default LoadingComponent;\r\n","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    rows: number;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {\r\n            meta.touched && meta.error ? (\r\n                    <Label basic color='red'>{meta.error}</Label>\r\n                ) : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    options: any;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable \r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {\r\n            meta.touched && meta.error ? (\r\n                    <Label basic color='red'>{meta.error}</Label>\r\n                ) : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {\r\n        text: 'Drinks',\r\n        value: 'drinks'\r\n    },\r\n    {\r\n        text: 'Culture',\r\n        value: 'culture'\r\n    },\r\n    {\r\n        text: 'Film',\r\n        value: 'film'\r\n    },\r\n    {\r\n        text: 'Food',\r\n        value: 'food'\r\n    },\r\n    {\r\n        text: 'Music',\r\n        value: 'music'\r\n    },\r\n    {\r\n        text: 'Travel',\r\n        value: 'travel'\r\n    }\r\n]","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {\r\n            meta.touched && meta.error ? (\r\n                    <Label basic color='red'>{meta.error}</Label>\r\n                ) : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Button, Segment, Header } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { v4  as uuid } from 'uuid';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nconst ActivityForm = () => {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>(); \r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id).then((activity) => {\r\n                setActivity(new ActivityFormValues(activity));\r\n            });\r\n        }\r\n    }, [id, loadActivity]);\r\n\r\n    const validationSchema = () => Yup.object({\r\n        title: Yup.string().required('Activity title is required'),\r\n        description: Yup.string().required('Activity description is required'),\r\n        category: Yup.string().required('Activity category is required'),\r\n        date: Yup.string().required('Activity date is required').nullable(),\r\n        venue: Yup.string().required('Activity venue is required'),\r\n        city: Yup.string().required('Activity city is required'),\r\n    });\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n\r\n            createActivity(newActivity).then(() => {\r\n                history.push(`/activities/${newActivity.id}`);\r\n            });\r\n        } else {\r\n            updateActivity(activity).then(() => {\r\n                history.push(`/activities/${activity.id}`);\r\n            });\r\n        }\r\n    }\r\n    \r\n    if(activityStore.loadingInitial) return <LoadingComponent content='Loading app...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema} \r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}\r\n            >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date'\r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Locations Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            floated='right' \r\n                            loading={isSubmitting} \r\n                            positive \r\n                            type='submit' \r\n                            content='Submit'  \r\n                        />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityForm);\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && (\r\n                    <Label ribbon color='red' content='Cancelled' style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {\r\n                    activity.isHost ? (\r\n                        <>\r\n                            <Button\r\n                                color={activity.isCancelled ? 'orange' : 'red'}\r\n                                floated='left' \r\n                                basic \r\n                                content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                                onClick={cancelActivityToggle}\r\n                                loading={loading}\r\n                            />\r\n                            <Button\r\n                                disabled={activity.isCancelled}\r\n                                as={Link}\r\n                                to={`/manage/${activity.id}`}\r\n                                color='orange'\r\n                                floated='right'\r\n                            >\r\n                                Manage Event\r\n                            </Button>\r\n                        </>\r\n                    ) : activity.isGoing ? (\r\n                        <Button \r\n                            loading={loading} \r\n                            onClick={updateAttendance}\r\n                        >\r\n                            Cancel attendance\r\n                            </Button>\r\n                    ) : (\r\n                        <Button \r\n                            loading={loading} \r\n                            disabled={activity.isCancelled} \r\n                            onClick={updateAttendance} \r\n                            color='teal'\r\n                        >\r\n                            Join Activity\r\n                        </Button>\r\n                    )\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n});","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId } : Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [activityId, commentStore]);\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik \r\n                        onSubmit={(v, { resetForm }) => commentStore.addComment(v).then(() => resetForm())}\r\n                        initialValues={{ body: '' }}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea \r\n                                                placeholder='Enter your comment (Enter to submit, SHIFT + Enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if (e.key === 'Enter' && e.shiftKey) {\r\n                                                        return;\r\n                                                    }\r\n\r\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                <Comment.Group>\r\n                    {\r\n                        commentStore.comments.map((comment) => (\r\n                            <Comment key={comment.id}>\r\n                                <Comment.Avatar src={comment.image || '/assets/user.png' }/>\r\n                                <Comment.Content>\r\n                                    <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                        {comment.displayName}\r\n                                    </Comment.Author>\r\n                                    <Comment.Metadata>\r\n                                        <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                    </Comment.Metadata>\r\n                                    <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                                </Comment.Content>\r\n                            </Comment>\r\n                        ))\r\n                    }\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n                {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n});","import React from 'react';\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({ activity : { attendees, host }} : Props) {\r\n    if (!attendees) return null;\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                { attendees.length } { attendees.length === 1 ? 'Person' : 'People' } going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    { attendees.map((a) => (\r\n                        <Item key={a.username} style={{ position: 'relative' }}>\r\n                            { a.username === host?.username && (\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label> \r\n                            )}\r\n                            <Image size='tiny' src={a.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${a.username}`}>{a.displayName}</Link>\r\n                                </Item.Header>\r\n                                {a.following && <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    )) }\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n});","import { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityDettailedHeader from './ActivityDettailedHeader';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSideBar from './ActivityDetailedSideBar';\r\n\r\nconst ActivityDetails = () => {\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id);\r\n        }\r\n\r\n        return () => {\r\n            clearSelectedActivity();\r\n        }\r\n    }, [clearSelectedActivity, id, loadActivity]);\r\n\r\n    if(loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDettailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSideBar activity={activity!} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails);\r\n","import React, {useState} from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            { errors && <ValidationErrors errors={errors} /> }\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nexport default function NotFound() {\r\n  return (\r\n    <Segment placeholder>\r\n        <Header icon>\r\n            <Icon name='search' />\r\n            Oops - we've looked everywhere and could not find this.\r\n        </Header>\r\n        <Segment.Inline>\r\n            <Button as={Link} to='/activities' primary>\r\n                Return to activities\r\n            </Button>\r\n        </Segment.Inline>\r\n    </Segment>\r\n  )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Header, Container, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {\r\n                commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>\r\n                        { commonStore.error?.details }\r\n                    </code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Modal, ModalContent } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <ModalContent>\r\n                {modalStore.modal.body}\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName, bio:\r\n                    profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name'\r\n                        name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio'\r\n                        name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n});","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\nimport { observer } from 'mobx-react-lite';\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [{\r\n    menuItem: 'Feature Events', pane: { key: 'feature' }\r\n},{\r\n    menuItem: 'Past Events', pane: { key: 'past' }\r\n},{\r\n    menuItem: 'Hosting', pane: { key: 'hosting' }\r\n}];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore: {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities,\r\n    } } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username)\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key)\r\n    }\r\n    \r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content='Activities' />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{secondary: true, pointing: true}}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {\r\n                            userActivities.map((activity: UserActivity) => \r\n                                <Card\r\n                                    as={Link}\r\n                                    to={`/activities/${activity.id}`}\r\n                                    key={activity.id}\r\n                                >\r\n                                    <Image\r\n                                        src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                        style={{ minHeight: 100, objectFit: 'cover'}}\r\n                                    />\r\n                                    <Card.Content>\r\n                                        <Card.Header textAlign=\"left\">\r\n                                            {activity.title}\r\n                                        </Card.Header>\r\n                                        <Card.Meta textAlign=\"left\">\r\n                                            <div>\r\n                                                {format(new Date(activity.date), 'do LLL')}\r\n                                            </div>\r\n                                            <div>\r\n                                                {format(new Date(activity.date), 'h:mm a')}\r\n                                            </div>\r\n                                        </Card.Meta>\r\n                                    </Card.Content>\r\n                                </Card>\r\n                            )\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n    \r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} following`} \r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map((profile) => <ProfileCard key={profile.username} profile={profile} />)}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { Cropper } from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface Props {\r\n    imagePreview: string,\r\n    setCropper: (cropper: Cropper) => void,\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper } : Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: \"100%\" }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={(cropper) => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles } : Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    };\r\n\r\n    const dzActive = {\r\n        borderColor: 'green', \r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file),\r\n        })));\r\n    }, [setFiles]);\r\n\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean,\r\n    uploadPhoto: (file: Blob) => void,\r\n}\r\n\r\nexport default function PhotoUploadWidget({ loading, uploadPhoto } : Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop () {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                { files && files.length > 0 && (\r\n                    <>\r\n                        <div className=\"img-preview\" style={{ height: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\"\r\nimport { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile } : Props) {\r\n    const { \r\n            profileStore: { \r\n                isCurrentUser, \r\n                uploadPhoto, \r\n                uploading, \r\n                loading, \r\n                setMainPhoto,\r\n                deletePhoto,\r\n        } \r\n    } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload (file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    } \r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    } \r\n\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='image' floated=\"left\" content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floated='right' \r\n                            basic \r\n                            content={addPhotoMode ? 'Cancel' : 'Add photo'} \r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} /> : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {\r\n                                profile.photos?.map((p) => \r\n                                <Card key={p.id}>\r\n                                    <Image src={p.url} />\r\n                                    {isCurrentUser && (\r\n                                         <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                loading={target === 'main' + p.id && loading} \r\n                                                onClick={(e) => handleSetMainPhoto(p, e)} \r\n                                                name={'main' + p.id} \r\n                                                basic\r\n                                                color='green' \r\n                                                content={'Main'}\r\n                                                disabled={p.isMain}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color=\"red\"\r\n                                                icon='trash'\r\n                                                loading={target === 'delete' + p.id && loading} \r\n                                                onClick={(e) => handleDeletePhoto(p, e)}\r\n                                                disabled={p.isMain}\r\n                                                name={'delete' + p.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                                )\r\n                            }\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile } : Props) {\r\n    const { profileStore } = useStore();\r\n\r\n\r\n    const panes = [{\r\n        menuItem: 'About', render: () => <ProfileAbout />\r\n    },{\r\n        menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />\r\n    },{\r\n        menuItem: 'Events', render: () => <ProfileActivities />\r\n    },{\r\n        menuItem: 'Followers', render: () => <ProfileFollowings />\r\n    },{\r\n        menuItem: 'Following', render: () => <ProfileFollowings />\r\n    }];\r\n\r\n    return (\r\n        <Tab menu={{ fluid: true, vertical: true}} onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex) } menuPosition='right' panes={panes} />\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile } : Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size=\"small\" src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign=\"middle\">\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string}>();\r\n    const { profileStore } = useStore();\r\n    const { loadProfile, loadingProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, setActiveTab, username]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content=\"Loading profile...\"/>\r\n\r\n    return (\r\n        <Grid>\r\n             <Grid.Column width={16}>\r\n                {profile && (\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n});","import { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router-dom';\r\nimport { useStore } from '../stores/store';\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props ) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n};","import { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, useLocation } from 'react-router';\nimport { Switch } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestErrors';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n    const location = useLocation();\n    const { commonStore, userStore } = useStore();\n\n    useEffect(() => {\n        if (commonStore.token) {\n            userStore.getUser().finally(() => commonStore.setAppLoaded());\n        } else {\n            commonStore.setAppLoaded();\n        }\n    }, [commonStore, userStore]);\n\n    if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n    return (\n        <>\n            <ToastContainer position='bottom-right' hideProgressBar />\n            <ModalContainer />\n            <Route path='/' exact component={HomePage} />\n            <Route\n                path={'/(.+)'}\n                render={() => (\n                    <>\n                        <NavBar />\n                        <Container style={{marginTop: '7em'}}>\n                            <Switch>\n                                <PrivateRoute path='/activities' exact component={ActivityDashboard} />\n                                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                                <PrivateRoute key={location.key} path={['/create', '/manage/:id']} component={ActivityForm} />\n                                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                                <PrivateRoute path='/errors' component={TestErrors} />\n                                <Route path='/server-error' component={ServerError} />\n                                <Route component={NotFound} />\n                            </Switch>\n                        </Container>\n                    </>\n                )}\n            />\n        </>\n    );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <Router history={history}>\n            <ScrollToTop />\n            <App />\n        </Router>\n    </StoreContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}