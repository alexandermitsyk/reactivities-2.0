{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivitiyListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDettailedHeader.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSideBar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","venue","city","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","loadUserActivities","setDisplayName","UserStore","fbAccessToken","fbLoading","refreshTokenTimout","name","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeOut","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","e","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","positing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","event","preventDefault","Card","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","bordered","circular","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","ribbon","zIndex","top","border","v","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","relaxed","divided","Extra","ActivityDettailedHeader","ActivityDetailedSideBar","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","ModalContent","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","pointing","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","location","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.0e1db577.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize ;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosResponse, AxiosError } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use((config) => {\r\n    const token = store.commonStore.token;\r\n\r\n    if (token) {\r\n        config.headers!.Authorization = `Bearer ${token}`;\r\n    }\r\n\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(async (response) => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        await sleep(1000);\r\n    }\r\n\r\n    const pagination = response.headers['pagination'];\r\n\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config, headers } = error.response!;\r\n\r\n    switch(status) {\r\n        case 400:\r\n            if(typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/notfound');\r\n            }\r\n\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401: \r\n            if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            break;\r\n        case 404: \r\n            history.push('/notfound');\r\n            break;\r\n        case 500: \r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>( url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params }).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}),\r\n    verifyEmail: (token: string, email: string) => requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\r\n    resendEmailConfirm: (email: string) => requests.get(`/account/resendEmailConfirmationLink?email=${email}`),\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n\r\n        return axios.post<Photo>('photos', formData, { \r\n            headers: {\r\n                'Content-type': 'multipart/form-data'\r\n            }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string,\r\n    isCancelled: boolean,\r\n    isGoing: boolean,\r\n    isHost: boolean,\r\n    host?: Profile,\r\n    attendees: Profile[],\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    venue: string = '';\r\n    city: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.description = activity.description;\r\n            this.category = activity.category;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string,\r\n    displayName: string,\r\n    image?: string,\r\n    bio?: string,\r\n    photos?: Photo[],\r\n    followersCount: number,\r\n    followingCount: number,\r\n    following: boolean,\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string,\r\n    url: string,\r\n    isMain: boolean,\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string,\r\n    title: string;\r\n    date: Date;\r\n    category: string;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../../app/models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() => this.predicate.keys(), () => {\r\n            this.pagingParams = new PagingParams();\r\n            this.activityRegistry.clear();\r\n            this.loadActivities();\r\n        });\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            });\r\n        };\r\n\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n    \r\n    get groupedActivities() {\r\n        return Object.entries(this.activitiesByDate.reduce((activities, activity) => {\r\n            const date = format(activity.date!, 'dd MMM yyyy');\r\n\r\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n\r\n            return activities;\r\n        }, {} as {[key: string] : Activity[]}))\r\n    };\r\n\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true);\r\n\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach((activity) => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n    \r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n\r\n        if(activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.setLoadingInitial(true);\r\n\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                });\r\n\r\n                this.setLoadingInitial(false);\r\n\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const { user } = store.userStore;\r\n\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(a => a.username === user.username);\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const { user } = store.userStore;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {\r\n                        ...this.getActivity(activity.id), \r\n                        ...activity \r\n                    };\r\n\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.delete(id);\r\n\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n    \r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const { user } = store.userStore;\r\n\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle =async () => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach((activity) => {\r\n            activity.attendees.forEach((attendee) => {\r\n\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(() => this.activeTab, activeTab => {\r\n            if (activeTab === 3 || activeTab === 4) {\r\n                const predicate = activeTab === 3 ? 'followers' : 'following';\r\n\r\n                this.loadFollowings(predicate);\r\n            } else {\r\n                this.followings = [];\r\n            }\r\n        });\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n\r\n                    this.uploading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                   this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                   this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                   this.profile.image = photo.url;\r\n                   this.loading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                };\r\n\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n\r\n                this.followings.forEach((profile) => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++\r\n                        profile.following = !profile.following;\r\n                    };\r\n                });\r\n\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n        \r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn () {\r\n        return !!this.user;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n             await agent.Account.register(creds);\r\n           \r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) {\r\n            this.user.image = image\r\n        }\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        });\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                });\r\n\r\n                history.push('/activities');\r\n            }).catch((error) => {\r\n                console.log(error);\r\n\r\n                runInAction(() => this.fbLoading = false);\r\n            });\r\n        }\r\n\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, { scope: 'public_profile,email' });\r\n        }\r\n    };\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n\r\n            runInAction(() => {\r\n                this.user = user;\r\n            });\r\n\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeOut = expires.getTime() - Date.now() - (60 * 1000);\r\n\r\n        this.refreshTokenTimout = setTimeout(this.refreshToken, timeOut);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimout);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\nimport CommentStore from \"./commentStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { ServerError } from \"../models/serverError\";\r\nimport { makeAutoObservable, reaction } from \"mobx\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder().withUrl(`${process.env.REACT_APP_CHAT_URL}/?activityId=${activityId}`, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            }).withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch((e) => console.log('Error establishing the connection', e));\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach((comment) => {\r\n                        comment.createdAt = new Date(comment.createdAt);\r\n                    });\r\n\r\n                    this.comments = comments;\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    \r\n                    this.comments.unshift(comment);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(e => console.log('Error stopping connection', e));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar () {    \r\n    const { userStore: { user, logout, isLoggedIn } } = useStore();\r\n    \r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.svg\" alt=\"logo\" style={{marginRight: 5}} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                { isLoggedIn &&\r\n                    <>\r\n                        <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\r\n                        <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\r\n                        <Menu.Item>\r\n                            <Button as={NavLink} to='/create' positive content='Create Activitiy' />\r\n                        </Menu.Item>  \r\n                        <Menu.Item position='right'>\r\n                            <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                            <Dropdown positing='top left' text={user?.displayName}>\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                                    <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </Menu.Item>  \r\n                    </>\r\n                }\r\n            </Container>\r\n        </Menu>\r\n    )\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function FollowButton({ profile } : Props) {\r\n    const { profileStore, userStore } = useStore();\r\n\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(event: SyntheticEvent, username: string) {\r\n        event.preventDefault();\r\n\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true)\r\n    }\r\n\r\n    return (\r\n        <Reveal animated=\"move\">\r\n            <Reveal.Content visible style={{ width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color=\"teal\" \r\n                    content={profile.following ? 'Following' : 'Not following'} \r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Image, Icon } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>\r\n                    {profile.displayName}\r\n                </Card.Header>\r\n                <Card.Description>\r\n                    {truncate(profile.bio)}\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' /> {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n});","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../../features/profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[],\r\n}\r\n \r\nexport default observer(function ActivitiyListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'pink',\r\n        borderWidth: 3,\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup hoverable key={attendee.username} trigger={\r\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                    <Image \r\n                        size='mini' \r\n                        bordered\r\n                        circular \r\n                        src={attendee.image || '/assets/user.png'} \r\n                        style={attendee.following ? styles : null}\r\n                    />\r\n                </List.Item>\r\n                }>\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee}/>\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivitiyListItemAttendee from './ActivitiyListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity,\r\n}\r\n\r\nconst ActivityListItem = ({ activity } : Props) => {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || 'assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {\r\n                                    activity.title\r\n                                }\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by <Link to={`/profiles/${activity.host?.username}`}> { activity.host?.displayName }</Link>\r\n                                { activity.isHost && (\r\n                                    <Item.Description>\r\n                                        <Label basic color='orange'>\r\n                                            You are hosting this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                ) }\r\n                                { activity.isGoing && !activity.isHost && (\r\n                                    <Item.Description>\r\n                                        <Label basic color='green'>\r\n                                            You are going to this activity\r\n                                        </Label>\r\n                                    </Item.Description>\r\n                                ) }\r\n                            </Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivitiyListItemAttendee attendees={activity.attendees!}/>           \r\n            </Segment>\r\n            <Segment clearing>\r\n                <span> \r\n                    {activity.description}\r\n                </span>\r\n                <Button as={Link} to={`/activities/${activity.id}`} color='teal' floated='right' content='View' />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\nexport default ActivityListItem;\r\n","import { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nconst ActivityList = () => {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n        {\r\n            groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                        {\r\n                            activities.map((activity) => \r\n                                <ActivityListItem key={activity.id} activity={activity} />\r\n                            )\r\n                        }\r\n                </Fragment>\r\n            ))\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityList);\r\n","import React from 'react';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport Calendar from 'react-calendar';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate} } = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{width: '100%', marginTop: '28px'}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date: any) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n});\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityList from '../dashboard/ActivityList';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nconst ActivityDashboard = () => {\r\n    const { activityStore } = useStore();\r\n\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll \r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDashboard);\r\n","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string,\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {\r\n            meta.touched && meta.error ? (\r\n                    <Label basic color='red'>{meta.error}</Label>\r\n                ) : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { Formik, Form, ErrorMessage } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return(\r\n        <Formik initialValues={{\r\n                email: '',\r\n                password: '',\r\n                error: null\r\n            }}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values)\r\n                .catch(error => setErrors({error: error.response.data}))\r\n            }\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"of\">\r\n                    <Header as='h2' content='Login to reactivities' color=\"teal\" textAlign=\"center\"/>\r\n                    <MyTextInput name='email' placeholder=\"Email\" />\r\n                    <MyTextInput name='password' placeholder=\"Password\" type='password' />\r\n                    <ErrorMessage \r\n                        name=\"error\" render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n});","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {\r\n                errors && (\r\n                    <Message.List>\r\n                        {\r\n                            errors.map((err: any, i: any) => (\r\n                                <Message.Item key={i}>\r\n                                    {err}\r\n                                </Message.Item>\r\n                            ))\r\n                        }\r\n                    </Message.List>\r\n                )\r\n            }\r\n        </Message>\r\n    )\r\n}","import { Formik, Form, ErrorMessage } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return(\r\n        <Formik initialValues={{\r\n                email: '',\r\n                password: '',\r\n                displayName: '',\r\n                username: '',\r\n                error: null\r\n            }}\r\n            onSubmit={\r\n                (values, {setErrors}) => userStore.register(values).catch(error => setErrors({error}))\r\n            }\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className=\"ui form error\" onSubmit={handleSubmit} autoComplete=\"of\">\r\n                    <Header as='h2' content='Sign up to reactivities' color=\"teal\" textAlign=\"center\"/>\r\n                    <MyTextInput name='email' placeholder=\"Email\" />\r\n                    <MyTextInput name='password' placeholder=\"Password\" type='password' />\r\n                    <MyTextInput name='displayName' placeholder=\"Display name\" />\r\n                    <MyTextInput name='username' placeholder=\"Username\" />\r\n                    <ErrorMessage \r\n                        name=\"error\" render={() => <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n});","import React from 'react';\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center'  vertical className='masthead'>\r\n            <Container>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='assets/logo.png' alt='logo' styles={{ marginBottom: 12}}/>\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn ? (\r\n                        <>\r\n                            <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                            <Button as={Link} to='/activities' size='huge' inverted>\r\n                                Go to activities\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login\r\n                            </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                            <Divider horizontal inverted> or </Divider>\r\n                            <Button loading={userStore.fbLoading} onClick={userStore.facebookLogin} size='huge' inverted color='facebook'>\r\n                                Login with facebook\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                }\r\n            </Container>\r\n        </Segment>\r\n    )\r\n});\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nconst LoadingComponent = ({inverted = true, content = 'Loading...'}: Props) => {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}\r\n\r\nexport default LoadingComponent;\r\n","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    rows: number;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {\r\n            meta.touched && meta.error ? (\r\n                    <Label basic color='red'>{meta.error}</Label>\r\n                ) : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    options: any;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable \r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {\r\n            meta.touched && meta.error ? (\r\n                    <Label basic color='red'>{meta.error}</Label>\r\n                ) : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {\r\n        text: 'Drinks',\r\n        value: 'drinks'\r\n    },\r\n    {\r\n        text: 'Culture',\r\n        value: 'culture'\r\n    },\r\n    {\r\n        text: 'Film',\r\n        value: 'film'\r\n    },\r\n    {\r\n        text: 'Food',\r\n        value: 'food'\r\n    },\r\n    {\r\n        text: 'Music',\r\n        value: 'music'\r\n    },\r\n    {\r\n        text: 'Travel',\r\n        value: 'travel'\r\n    }\r\n]","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {\r\n            meta.touched && meta.error ? (\r\n                    <Label basic color='red'>{meta.error}</Label>\r\n                ) : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Button, Segment, Header } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { v4  as uuid } from 'uuid';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nconst ActivityForm = () => {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>(); \r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id).then((activity) => {\r\n                setActivity(new ActivityFormValues(activity));\r\n            });\r\n        }\r\n    }, [id, loadActivity]);\r\n\r\n    const validationSchema = () => Yup.object({\r\n        title: Yup.string().required('Activity title is required'),\r\n        description: Yup.string().required('Activity description is required'),\r\n        category: Yup.string().required('Activity category is required'),\r\n        date: Yup.string().required('Activity date is required').nullable(),\r\n        venue: Yup.string().required('Activity venue is required'),\r\n        city: Yup.string().required('Activity city is required'),\r\n    });\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n\r\n            createActivity(newActivity).then(() => {\r\n                history.push(`/activities/${newActivity.id}`);\r\n            });\r\n        } else {\r\n            updateActivity(activity).then(() => {\r\n                history.push(`/activities/${activity.id}`);\r\n            });\r\n        }\r\n    }\r\n    \r\n    if(activityStore.loadingInitial) return <LoadingComponent content='Loading app...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema} \r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}\r\n            >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date'\r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Locations Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            floated='right' \r\n                            loading={isSubmitting} \r\n                            positive \r\n                            type='submit' \r\n                            content='Submit'  \r\n                        />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityForm);\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && (\r\n                    <Label ribbon color='red' content='Cancelled' style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {\r\n                    activity.isHost ? (\r\n                        <>\r\n                            <Button\r\n                                color={activity.isCancelled ? 'orange' : 'red'}\r\n                                floated='left' \r\n                                basic \r\n                                content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                                onClick={cancelActivityToggle}\r\n                                loading={loading}\r\n                            />\r\n                            <Button\r\n                                disabled={activity.isCancelled}\r\n                                as={Link}\r\n                                to={`/manage/${activity.id}`}\r\n                                color='orange'\r\n                                floated='right'\r\n                            >\r\n                                Manage Event\r\n                            </Button>\r\n                        </>\r\n                    ) : activity.isGoing ? (\r\n                        <Button \r\n                            loading={loading} \r\n                            onClick={updateAttendance}\r\n                        >\r\n                            Cancel attendance\r\n                            </Button>\r\n                    ) : (\r\n                        <Button \r\n                            loading={loading} \r\n                            disabled={activity.isCancelled} \r\n                            onClick={updateAttendance} \r\n                            color='teal'\r\n                        >\r\n                            Join Activity\r\n                        </Button>\r\n                    )\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n});","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId } : Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [activityId, commentStore]);\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik \r\n                        onSubmit={(v, { resetForm }) => commentStore.addComment(v).then(() => resetForm())}\r\n                        initialValues={{ body: '' }}\r\n                        validationSchema={Yup.object({\r\n                            body: Yup.string().required()\r\n                        })}\r\n                    >\r\n                        {({ isSubmitting, isValid, handleSubmit }) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {(props: FieldProps) => (\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting} />\r\n                                            <textarea \r\n                                                placeholder='Enter your comment (Enter to submit, SHIFT + Enter for new line)'\r\n                                                rows={2}\r\n                                                {...props.field}\r\n                                                onKeyPress={e => {\r\n                                                    if (e.key === 'Enter' && e.shiftKey) {\r\n                                                        return;\r\n                                                    }\r\n\r\n                                                    if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                        e.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                <Comment.Group>\r\n                    {\r\n                        commentStore.comments.map((comment) => (\r\n                            <Comment key={comment.id}>\r\n                                <Comment.Avatar src={comment.image || '/assets/user.png' }/>\r\n                                <Comment.Content>\r\n                                    <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                        {comment.displayName}\r\n                                    </Comment.Author>\r\n                                    <Comment.Metadata>\r\n                                        <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                    </Comment.Metadata>\r\n                                    <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                                </Comment.Content>\r\n                            </Comment>\r\n                        ))\r\n                    }\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n                {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n});","import React from 'react';\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({ activity : { attendees, host }} : Props) {\r\n    if (!attendees) return null;\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                { attendees.length } { attendees.length === 1 ? 'Person' : 'People' } going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    { attendees.map((a) => (\r\n                        <Item key={a.username} style={{ position: 'relative' }}>\r\n                            { a.username === host?.username && (\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label> \r\n                            )}\r\n                            <Image size='tiny' src={a.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${a.username}`}>{a.displayName}</Link>\r\n                                </Item.Header>\r\n                                {a.following && <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    )) }\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n});","import { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityDettailedHeader from './ActivityDettailedHeader';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSideBar from './ActivityDetailedSideBar';\r\n\r\nconst ActivityDetails = () => {\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadActivity(id);\r\n        }\r\n\r\n        return () => {\r\n            clearSelectedActivity();\r\n        }\r\n    }, [clearSelectedActivity, id, loadActivity]);\r\n\r\n    if(loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDettailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSideBar activity={activity!} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default observer(ActivityDetails);\r\n","import React, {useState} from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            { errors && <ValidationErrors errors={errors} /> }\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nexport default function NotFound() {\r\n  return (\r\n    <Segment placeholder>\r\n        <Header icon>\r\n            <Icon name='search' />\r\n            Oops - we've looked everywhere and could not find this.\r\n        </Header>\r\n        <Segment.Inline>\r\n            <Button as={Link} to='/activities' primary>\r\n                Return to activities\r\n            </Button>\r\n        </Segment.Inline>\r\n    </Segment>\r\n  )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Header, Container, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {\r\n                commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>\r\n                        { commonStore.error?.details }\r\n                    </code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Modal, ModalContent } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <ModalContent>\r\n                {modalStore.modal.body}\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName, bio:\r\n                    profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name'\r\n                        name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio'\r\n                        name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n});","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\nimport { observer } from 'mobx-react-lite';\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [{\r\n    menuItem: 'Feature Events', pane: { key: 'feature' }\r\n},{\r\n    menuItem: 'Past Events', pane: { key: 'past' }\r\n},{\r\n    menuItem: 'Hosting', pane: { key: 'hosting' }\r\n}];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore: {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities,\r\n    } } = useStore();\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username)\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key)\r\n    }\r\n    \r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content='Activities' />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{secondary: true, pointing: true}}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {\r\n                            userActivities.map((activity: UserActivity) => \r\n                                <Card\r\n                                    as={Link}\r\n                                    to={`/activities/${activity.id}`}\r\n                                    key={activity.id}\r\n                                >\r\n                                    <Image\r\n                                        src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                        style={{ minHeight: 100, objectFit: 'cover'}}\r\n                                    />\r\n                                    <Card.Content>\r\n                                        <Card.Header textAlign=\"left\">\r\n                                            {activity.title}\r\n                                        </Card.Header>\r\n                                        <Card.Meta textAlign=\"left\">\r\n                                            <div>\r\n                                                {format(new Date(activity.date), 'do LLL')}\r\n                                            </div>\r\n                                            <div>\r\n                                                {format(new Date(activity.date), 'h:mm a')}\r\n                                            </div>\r\n                                        </Card.Meta>\r\n                                    </Card.Content>\r\n                                </Card>\r\n                            )\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n    \r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} following`} \r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map((profile) => <ProfileCard key={profile.username} profile={profile} />)}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { Cropper } from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface Props {\r\n    imagePreview: string,\r\n    setCropper: (cropper: Cropper) => void,\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper } : Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: \"100%\" }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={(cropper) => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles } : Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    };\r\n\r\n    const dzActive = {\r\n        borderColor: 'green', \r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file),\r\n        })));\r\n    }, [setFiles]);\r\n\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean,\r\n    uploadPhoto: (file: Blob) => void,\r\n}\r\n\r\nexport default function PhotoUploadWidget({ loading, uploadPhoto } : Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop () {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                { files && files.length > 0 && (\r\n                    <>\r\n                        <div className=\"img-preview\" style={{ height: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\"\r\nimport { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile } : Props) {\r\n    const { \r\n            profileStore: { \r\n                isCurrentUser, \r\n                uploadPhoto, \r\n                uploading, \r\n                loading, \r\n                setMainPhoto,\r\n                deletePhoto,\r\n        } \r\n    } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload (file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    } \r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    } \r\n\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='image' floated=\"left\" content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floated='right' \r\n                            basic \r\n                            content={addPhotoMode ? 'Cancel' : 'Add photo'} \r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} /> : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {\r\n                                profile.photos?.map((p) => \r\n                                <Card key={p.id}>\r\n                                    <Image src={p.url} />\r\n                                    {isCurrentUser && (\r\n                                         <Button.Group fluid widths={2}>\r\n                                            <Button \r\n                                                loading={target === 'main' + p.id && loading} \r\n                                                onClick={(e) => handleSetMainPhoto(p, e)} \r\n                                                name={'main' + p.id} \r\n                                                basic\r\n                                                color='green' \r\n                                                content={'Main'}\r\n                                                disabled={p.isMain}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color=\"red\"\r\n                                                icon='trash'\r\n                                                loading={target === 'delete' + p.id && loading} \r\n                                                onClick={(e) => handleDeletePhoto(p, e)}\r\n                                                disabled={p.isMain}\r\n                                                name={'delete' + p.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                                )\r\n                            }\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile } : Props) {\r\n    const { profileStore } = useStore();\r\n\r\n\r\n    const panes = [{\r\n        menuItem: 'About', render: () => <ProfileAbout />\r\n    },{\r\n        menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />\r\n    },{\r\n        menuItem: 'Events', render: () => <ProfileActivities />\r\n    },{\r\n        menuItem: 'Followers', render: () => <ProfileFollowings />\r\n    },{\r\n        menuItem: 'Following', render: () => <ProfileFollowings />\r\n    }];\r\n\r\n    return (\r\n        <Tab menu={{ fluid: true, vertical: true}} onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex) } menuPosition='right' panes={panes} />\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile } : Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size=\"small\" src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign=\"middle\">\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string}>();\r\n    const { profileStore } = useStore();\r\n    const { loadProfile, loadingProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, setActiveTab, username]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content=\"Loading profile...\"/>\r\n\r\n    return (\r\n        <Grid>\r\n             <Grid.Column width={16}>\r\n                {profile && (\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n});","import { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router-dom';\r\nimport { useStore } from '../stores/store';\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props ) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n};","import { useLocation } from \"react-router-dom\";\r\n\r\nexport default function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}","import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\n\r\nexport default function RegisterSuccess() {\r\n    const email = useQuery().get('email') as string;\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email')\r\n        }).catch(e => console.log(e));\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon color='green'>\r\n                <Icon name='check' />\r\n                Successfully registreted!\r\n            </Header>\r\n            <p>Please check your email for the verification email</p>\r\n            { email && \r\n                (\r\n                    <>\r\n                        <p>Didn't receive the email? Click the below to resend</p>\r\n                        <Button primary size='huge' onClick={handleConfirmEmailResend}>Resend email</Button>\r\n                    </>\r\n                )\r\n            }\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport agent from '../../app/api/agent';\r\nimport useQuery from '../../app/common/util/hooks';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from './LoginForm';\r\n\r\nexport default function ConfirmEmail() {\r\n    const { modalStore } = useStore();\r\n    const email = useQuery().get('email') as string;\r\n    const token =  useQuery().get('token') as string;\r\n\r\n    const Status = {\r\n        Verifying: 'Verifying',\r\n        Failed: 'Failed',\r\n        Success: 'Success',\r\n    }\r\n\r\n    const [status, setStatus] = useState(Status.Verifying);\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email')\r\n        }).catch(e => console.log(e));\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Account.verifyEmail(token, email).then(() => {\r\n            setStatus(Status.Success);\r\n        }).catch(e => { \r\n            setStatus(Status.Failed); console.log(e) \r\n        });\r\n    }, [Status.Failed, Status.Success, email, token]);\r\n\r\n    function getBody() {\r\n        switch (status) {\r\n            case Status.Verifying:\r\n                return <p>Verifying...</p>\r\n            case Status.Failed:\r\n                return (\r\n                    <div>\r\n                        <p>Verification failed. You can try resending the verify link to your email</p>\r\n                        <Button primary size='huge' onClick={handleConfirmEmailResend}>Resend email</Button>\r\n                    </div>\r\n                )\r\n            case Status.Success:\r\n                return (\r\n                    <div>\r\n                        <p>Email has been verified - you can now login</p>\r\n                        <Button primary size='huge' onClick={() => modalStore.openModal(<LoginForm />)}>Login</Button>\r\n                    </div>\r\n                )\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon>\r\n                <Icon name='envelope' />\r\n                Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, useLocation } from 'react-router';\nimport { Switch } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestErrors';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\n\nfunction App() {\n    const location = useLocation();\n    const { commonStore, userStore } = useStore();\n\n    useEffect(() => {\n        if (commonStore.token) {\n            userStore.getUser().finally(() => commonStore.setAppLoaded());\n        } else {\n            userStore.getFacebookLoginStatus().then(() => {\n                commonStore.setAppLoaded();\n            });\n            commonStore.setAppLoaded();\n        }\n    }, [commonStore, userStore]);\n\n    if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n    return (\n        <>\n            <ToastContainer position='bottom-right' hideProgressBar />\n            <ModalContainer />\n            <Route path='/' exact component={HomePage} />\n            <Route\n                path={'/(.+)'}\n                render={() => (\n                    <>\n                        <NavBar />\n                        <Container style={{marginTop: '7em'}}>\n                            <Switch>\n                                <PrivateRoute path='/activities' exact component={ActivityDashboard} />\n                                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                                <PrivateRoute key={location.key} path={['/create', '/manage/:id']} component={ActivityForm} />\n                                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                                <PrivateRoute path='/errors' component={TestErrors} />\n                                <Route path='/server-error' component={ServerError} />\n                                <Route path='/account/registerSuccess' component={RegisterSuccess} />\n                                <Route path='/account/verifyEmail' component={ConfirmEmail} />\n                                <Route component={NotFound} />\n                            </Switch>\n                        </Container>\n                    </>\n                )}\n            />\n        </>\n    );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <Router history={history}>\n            <ScrollToTop />\n            <App />\n        </Router>\n    </StoreContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}